<?xml version="1.0" encoding="UTF-8"?>
<root xmlns:nsd="https://structorizer.fisch.lu" version="3.32-11" preRepeat="until " postFor="to" preReturn="return" postForIn="in" preWhile="while " output="OUTPUT" input="INPUT" preFor="for" preExit="exit" preLeave="leave" ignoreCase="true" preThrow="throw" preForIn="foreach" stepFor="by" namespace="" author="RobCode" created="2022-11-03" changedby="RobCode" changed="2022-11-03" origin="Structorizer 3.32-11" text="&#34;Function(): CreateSubject ( createModel : CreateSubjectModel ) : ResponseModel&#34;" comment="&#34;&#34;" color="ffffff" type="program" style="nice">
	<children>
		<call text="&#34;ResponseModel model =&#62; new ResponseModel()&#34;" comment="&#34;&#34;" color="ffffff" disabled="0" ismethoddecl="0"></call>
		<try text="&#34;Exception&#34;" comment="&#34;&#34;" color="ffffff" disabled="0">
			<qTry>
				<alternative text="&#34;if ( DATABASE.Subjects.ANY(Entity.subjectId == createModel.subjectId) )&#34;" comment="&#34;&#34;" color="ffffff" disabled="0">
					<qTrue>
						<instruction text="&#34;model.IsSucces = false&#34;,&#34;model.Message = &#34;&#34;Fach existiert schon&#34;&#34;&#34;,&#34;&#34;,&#34;return model&#34;" comment="&#34;&#34;" color="ffffff" rotated="0" disabled="0"></instruction>
					</qTrue>
					<qFalse color="ffffff">
					</qFalse>
				</alternative>
				<call text="&#34;Subject subject =&#62; new Subject()&#34;" comment="&#34;&#34;" color="ffffff" disabled="0" ismethoddecl="0"></call>
				<instruction text="&#34;subject.Name = createModel.Name&#34;,&#34;subject.ShortName = createModel.ShortName&#34;,&#34;subject.SubjectId = createModel.SubjectId&#34;,&#34;subject.SchoolYear = DATABASE.SchoolYear.WHERE( Entity.Id == createModel.SchoolYear )&#34;" comment="&#34;&#34;" color="ffffff" rotated="0" disabled="0"></instruction>
				<alternative text="&#34;if ( createModel.Grad is not null )&#34;" comment="&#34;&#34;" color="ffffff" disabled="0">
					<qTrue>
						<for text="&#34;foreach Grad in createModel.Grads&#34;" comment="&#34;&#34;" counterVar="Grad" startValue="" stepConst="" style="TRAVERSAL" insep="in" color="ffffff" disabled="0">
							<qFor>
								<instruction text="&#34;subject.Grads.Add =&#62; DATABASE.Grads.Where(Entity.Id == Grad.Id)&#34;" comment="&#34;&#34;" color="ffffff" rotated="0" disabled="0"></instruction>
							</qFor>
						</for>
					</qTrue>
					<qFalse color="ffffff">
					</qFalse>
				</alternative>
				<call text="&#34;DATABASE.Subjects.ADD =&#62; subject&#34;" comment="&#34;&#34;" color="ffffff" disabled="0" ismethoddecl="0"></call>
				<call text="&#34;DATABASE.Save()&#34;" comment="&#34;&#34;" color="ffffff" disabled="0" ismethoddecl="0"></call>
				<instruction text="&#34;model.IsSuccess = true&#34;,&#34;model.Message = &#34;&#34;Fach hinzugefÃ¼gt&#34;&#34;&#34;" comment="&#34;&#34;" color="ffffff" rotated="0" disabled="0"></instruction>
			</qTry>
			<qCatch>
				<instruction text="&#34;model.IsSuccess = false&#34;,&#34;model.Message = &#34;&#34;Error : &#34;&#34; + Exception&#34;" comment="&#34;&#34;" color="ffffff" rotated="0" disabled="0"></instruction>
			</qCatch>
			<qFinally color="ffffff">
			</qFinally>
		</try>
		<instruction text="&#34;return model&#34;" comment="&#34;&#34;" color="ffffff" rotated="0" disabled="0"></instruction>
	</children>
</root>